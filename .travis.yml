# SLB
#
# Copyright Michael Park, 2017
# Copyright Agustin Berge, 2017
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: cpp
sudo: false

matrix:
  include:
    # gcc-4.8
    - env: VERSION=4.8 CXX_VERSIONS="11;1y"
      compiler: gcc
      os: linux
      addons:
        apt:
          packages:
            - g++-4.8
          sources:
            - ubuntu-toolchain-r-test

    # gcc-4.9
    - env: VERSION=4.9 CXX_VERSIONS="11;14"
      compiler: gcc
      os: linux
      addons:
        apt:
          packages:
            - g++-4.9
          sources:
            - ubuntu-toolchain-r-test

    # gcc-5
    - env: VERSION=5 CXX_VERSIONS="11;14;1z"
      compiler: gcc
      os: linux
      addons:
        apt:
          packages:
            - g++-5
          sources:
            - ubuntu-toolchain-r-test

    # gcc-6
    - env: VERSION=6 CXX_VERSIONS="11;14;1z"
      compiler: gcc
      os: linux
      addons:
        apt:
          packages:
            - g++-6
          sources:
            - ubuntu-toolchain-r-test

    # gcc-7
    - env: VERSION=7 CXX_VERSIONS="11;14;17" CXXFLAGS="-Wno-noexcept-type"
      compiler: gcc
      os: linux
      addons:
        apt:
          packages:
            - g++-7
          sources:
            - ubuntu-toolchain-r-test

    # clang-3.7
    - env: VERSION=3.7 CXX_VERSIONS="11;14"
      compiler: clang
      os: linux
      addons:
        apt:
          packages:
            - clang-3.7
            - libstdc++-5-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7

    # clang-3.8
    - env: VERSION=3.8 CXX_VERSIONS="11;14"
      compiler: clang
      os: linux
      addons:
        apt:
          packages:
            - clang-3.8
            - libstdc++-5-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8

    # clang-3.9
    - env: VERSION=3.9 CXX_VERSIONS="11;14;1z"
      compiler: clang
      os: linux
      addons:
        apt:
          packages:
            - clang-3.9
            - libstdc++-6-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-3.9

    # clang-4
    - env: VERSION=4.0 CXX_VERSIONS="11;14;1z"
      compiler: clang
      os: linux
      addons:
        apt:
          packages:
            - clang-4.0
            - libstdc++-6-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0

    # clang-5
    - env: VERSION=5.0 CXX_VERSIONS="11;14;17"
      compiler: clang
      os: linux
      addons:
        apt:
          packages:
            - clang-5.0
            - libstdc++-7-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0

    # Xcode 6.4
    - env: CXX_VERSIONS="11;14"
      compiler: clang
      os: osx
      osx_image: xcode6.4

    # Xcode 7.3
    - env: CXX_VERSIONS="11;14;1z"
      compiler: clang
      os: osx
      osx_image: xcode7.3

    # Xcode 8.3
    - env: CXX_VERSIONS="11;14;1z"
      compiler: clang
      os: osx
      osx_image: xcode8.3

    # Xcode 9.1
    - env: CXX_VERSIONS="11;14;1z"
      compiler: clang
      os: osx
      osx_image: xcode9.1

branches:
  only:
    - master

install:
  - |
    if [ -n "${VERSION}" ]; then
      export CC="${CC}-${VERSION}"
      export CXX="${CXX}-${VERSION}"
    fi

script:
  - |
    python - <<EOF
    import os
    import pprint
    import subprocess
    result = {}
    cxxflags = '${CXXFLAGS} -std=c++{std} -Wall -Wextra -Werror -pedantic-errors'
    for cxx_version in "${CXX_VERSIONS}".split(';'):
      os.environ['CXXFLAGS'] = cxxflags.format(std=cxx_version)
      for build_type in ['Debug', 'Release']:
          config = '{}-{}'.format(cxx_version, build_type)
          build_dir = 'build-{}'.format(config)
          os.mkdir(build_dir)
          os.chdir(build_dir)
          result[config] = [
            ['configure', None], ['build', None], ['test', None]
          ]
          result[config][0][1] = subprocess.call([
            'cmake', '-DCMAKE_BUILD_TYPE={}'.format(build_type), '..'])
          if result[config][0][1] == 0:
            result[config][1][1] = subprocess.call([
              'cmake', '--build', '.', '--', '-k', '-j', '2'])
            result[config][2][1] = subprocess.call([
              'ctest', '--output-on-failure'])
          os.chdir('..')
    pprint.pprint(result)
    exit(any(status != 0 for l in result.itervalues() for _, status in l))
    EOF

notifications:
  email: false
